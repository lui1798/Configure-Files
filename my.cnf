#
## optimized mysql configure file my.cnf
## 注意：个别建议可能需要根据实际情况作调整，请自行判断或联系我，本人不对这些建议结果负相应责任
## 本配置文件主要适用于MySQL 5.7版本
#
[client]
port	= 3306
socket	= /data/mysql/mysql.sock
[mysql]
no-auto-rehash

[mysqld]
# 跳过密码登录
skip-grant-tables
user	= mysql
port	= 3306
datadir	= /data/mysql
socket	= /data/mysql/mysql.sock

default-storage-engine=InnoDB 

character-set-server = utf8
# 禁用DNS解析，加快外网访问速度
skip_name_resolve = 1
open_files_limit    = 65535
# back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，
# 如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log
back_log = 1024
max_connections = 1000
max_connect_errors = 1000000
# 当某一连接访问一个表时，MySQL会检查当前已缓存表的数量。如果该表已经在缓存中打开，则会直接访问缓存中的表已加快查询速度；
# 如果该表未被缓存，则会将当前的表添加进缓存并进行查询
table_open_cache = 1024
table_definition_cache = 1024
table_open_cache_instances = 64
thread_stack = 512K
external-locking = FALSE
# 通信缓冲区的最大长度
max_allowed_packet = 32M
sort_buffer_size = 4M
join_buffer_size = 4M
thread_cache_size = 1500
bind-address = 0.0.0.0

# 日志
#log_timestamps = SYSTEM
# 全局日志，连客户端ip也有记录的
general_log = 1
general_log_file = /data/mysql/mysql.log
slow_query_log = 1
slow_query_log_file = /data/mysql/slow.log
log-error = /data/mysql/error.log
long_query_time = 0.1

# 当某一连接访问一个表时，MySQL会检查当前已缓存表的数量。如果该表已经在缓存中打开，则会直接访问缓存中的表已加快查询速度；
# 如果该表未被缓存，则会将当前的表添加进缓存并进行查询
query_cache_size = 0
query_cache_type = 0
interactive_timeout = 600
wait_timeout = 600
tmp_table_size = 32M
# 设置临时表的最大值，超出了会自动以mysiam的方式写入tmp目录下
max_heap_table_size = 32M
key_buffer_size = 32M
read_buffer_size = 8M
read_rnd_buffer_size = 4M
bulk_insert_buffer_size = 64M
myisam_sort_buffer_size = 128M
myisam_max_sort_file_size = 10G
myisam_repair_threads = 1
lock_wait_timeout = 3600
explicit_defaults_for_timestamp = 1
# 是否允许客户端使用load data local infile语句
local_infile = 1
innodb_thread_concurrency = 0
innodb_sync_spin_loops = 100
innodb_spin_wait_delay = 30

transaction_isolation = REPEATABLE-READ
#innodb_additional_mem_pool_size = 16M
# 70%的物理内存
innodb_buffer_pool_size = 8G
innodb_buffer_pool_instances = 8
innodb_buffer_pool_load_at_startup = 1
innodb_buffer_pool_dump_at_shutdown = 1
# innodb_data_file_path = ibdata1:1G:autoextend
innodb_flush_log_at_trx_commit = 2
innodb_log_buffer_size = 32M
# 单个日志文件的大小
innodb_log_file_size = 2G
# 默认2，日志以顺序的方式写入
innodb_log_files_in_group = 2
innodb_max_undo_log_size = 4G

# 根据您的服务器IOPS能力适当调整
# 一般配普通SSD盘的话，可以调整到 10000 - 20000
# 配置高端PCIe SSD卡的话，则可以调整的更高，比如 50000 - 80000
innodb_io_capacity = 4000
innodb_io_capacity_max = 8000

innodb_write_io_threads = 8
innodb_read_io_threads = 8
innodb_purge_threads = 4
#innodb_page_cleaners = 4
innodb_open_files = 65535
innodb_max_dirty_pages_pct = 50
innodb_flush_method = O_DIRECT
innodb_lru_scan_depth = 4000
innodb_checksum_algorithm = crc32
#innodb_file_format = Barracuda
#innodb_file_format_max = Barracuda
innodb_lock_wait_timeout = 10
innodb_rollback_on_timeout = 1
innodb_print_all_deadlocks = 1
innodb_file_per_table = 1
innodb_online_alter_log_max_size = 4G
#internal_tmp_disk_storage_engine = InnoDB
innodb_stats_on_metadata = 0

innodb_status_file = 1
# 注意: 开启 innodb_status_output & innodb_status_output_locks 后, 可能会导致log-error文件增长较快
innodb_status_output = 0
innodb_status_output_locks = 0

#performance_schema
performance_schema = 1
performance_schema_instrument = '%=on'

#innodb monitor
innodb_monitor_enable="module_innodb"
innodb_monitor_enable="module_server"
innodb_monitor_enable="module_dml"
innodb_monitor_enable="module_ddl"
innodb_monitor_enable="module_trx"
innodb_monitor_enable="module_os"
innodb_monitor_enable="module_purge"
innodb_monitor_enable="module_log"
innodb_monitor_enable="module_lock"
innodb_monitor_enable="module_buffer"
innodb_monitor_enable="module_index"
innodb_monitor_enable="module_ibuf_system"
innodb_monitor_enable="module_buffer_page"
innodb_monitor_enable="module_adaptive_hash"

# ------------ 主从配置 ------------------
#server-id = 1
# 日志压缩复制，可减少80%的服务器之间通信开销，所以主从两个服务器都要开启
#slave_compressed_protocol = 1
# 开启gtid， 查看gtid状态 show global variables like '%gtid%'
#gtid_mode = on
#enforce_gtid_consistency = 1
# 从库作为其他从库的主库时，必须要添加 并且如果开始gtid需要开启这个
#log_slave_updates
# 当每进行1次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。
#sync_binlog = 1
#binlog_cache_size = 4M
#max_binlog_cache_size = 2G
#max_binlog_size = 1G
#expire_logs_days = 7
#master_info_repository = TABLE
#relay_log_info_repository = TABLE
#binlog_format = row
#relay_log_recovery = 1
#relay-log-purge = 1
# ------------ 主从配置 ------------------

# 用于主库
log-bin = /data/mysql/mybinlog
# binlog-do-db            = ucenter
# binlog_ignore_db        = mysql
# 用于从库
# replicate_do_db           = ucenter
# replicate-ignore-db       = mysql

[mysqldump]
quick
max_allowed_packet = 32M

